#!/usr/bin/env groovy

// set during the first step and reused afterwards
PKG_VER = ""
PKG_NAME = ""
PKG_DEST = ""
PKG_WIDGET = "false"
PKG_VER_DEV = ""

pipeline {
	agent {
		label "nodejs8"
	}
	options {
		timeout(time: 20, unit: 'MINUTES')
		disableConcurrentBuilds()
	}
	environment {
		Registry = "http://artifactory.sbtech.com:8081/artifactory/General/"
	}
	stages {
		stage('Prepare env') {
			steps {
				script {
					PKG_NAME = bat(script: "@node -p \"require('./package.json').name\"", returnStdout: true).trim()
					PKG_WIDGET = bat(script: "@node -p \"require('./package.json').widget\"", returnStdout: true).trim()
				}
				
				bat 'npm i npmrc'
				configFileProvider([configFile(fileId: '52acf712-75e9-4e49-9097-6f5dc3613437', targetLocation: '.npmrc')]) {
					echo '[INFO] File .npmrc created in workspace'
				}
				bat 'npm install'
			}
		}
		stage('Test') {
			steps {
				bat 'npm run test:coverage'
			}
		}
		stage('Build') {
			steps {
				script {
					echo '[INFO] Regular Build started'
					bat 'npm run build'

					if(PKG_WIDGET == "true"){
						echo '[INFO] External Build started'
						bat 'npm run build-external'
					}
				}
			}
		}
		stage('Install deployment tool') {
			steps {
				script {
					bat 'npm install sb-resp-scripts'
				}
			}
		}
		stage('Preparing version (release/*)') {
			when { 
				anyOf { 
					branch 'release/*';
				}
			}
			steps {
				script {
					echo "[INFO] Set version number"
					bat "node ./node_modules/sb-resp-scripts cdn setVersion"
				}
			}
		}
		stage('NPM Publish (release/*)') {
			when { 
				anyOf { 
					branch 'release/*';
				}
			}
			steps {
				script {
					bat 'npm publish'
				}
			}
		}
		stage('GIT Push new tag (release/*)') {
			when {
				anyOf {
					branch 'release/*';
				}
			}
			steps {
				script {
					PKG_VER = bat(script: "@node -p \"require('./package.json').version\"", returnStdout: true).trim()
					withCredentials([usernamePassword(credentialsId: '65532f8a-77d0-4191-9e45-d10a2c37c772', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
						bat("git tag -a ${PKG_VER} -m 'Jenkins' ${GIT_COMMIT}")
						String encoded_password = java.net.URLEncoder.encode(env.GIT_PASSWORD, "UTF-8").replace('%', '%%')
						String url_split = env.GIT_URL.split("//")[1]
						bat ("@git push https://${GIT_USERNAME}:${encoded_password}@${url_split} --tags")
					}
				}
			}
		}
		stage('Upload to GoogleCloudStorage') {
			when {
				anyOf {
					branch 'master';
					branch 'release/*';
					branch 'development';
				}
			}
			steps {
				script {
					withCredentials([file(credentialsId: 'sbtech-cdn-file', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
						bat "node ./node_modules/sb-resp-scripts cdn deploy " + env.BRANCH_NAME
					}
				}
			}
		}
	}
	post {
		always {
			deleteDir()
			cleanWs()
		}
	}
}